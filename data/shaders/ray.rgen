#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable

#include "ray.common.glsl"
#include "ray.common.random.glsl"
#include "ray.common.payload.glsl"

// @see https://nvpro-samples.github.io/vk_raytracing_tutorial_KHR/

layout(location = 0) rayPayloadEXT RayPayload payload;

layout(binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, rgba8) uniform image2D image;
layout(binding = 2) uniform Camera {
  mat4 viewInverse;
  mat4 projInverse;
} camera;

vec2 samplePixelCenter(inout Random rng, bool isJitter) {
  float r0 = randomNext(rng);
  float r1 = randomNext(rng);
  vec2 subpixelJitter = isJitter ? vec2(r0, r1) : vec2(0.5, 0.5);
  vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subpixelJitter;
  return pixelCenter;
}

vec3 diffuse(vec3 origin, vec3 direction) {
  const float tMin = 0.001;
  const float tMax = 10000.0;
  vec3 color = vec3(1.0);
  for (uint i = 0; i < 12; i++) {
    payload.continues = false;
    traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, 0xff, 0, 0, 0, origin, tMin, direction, tMax, 0);
    color *= payload.hitValue;
    if (payload.continues) {
      origin = payload.scatter.origin;
      direction = payload.scatter.direction;
    } else {
      return color;
    }
  }
  return vec3(0.0);
}

void main() {
  payload.random = randomInit(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, 0);

  const uint NUM_SAMPLES = 1;
  vec3 hitValues = vec3(0.0);
  for (uint i = 0; i < NUM_SAMPLES; i++) {
    const bool isJitter = false;
    const vec2 pixelCenter = samplePixelCenter(payload.random, isJitter);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    const vec2 d = inUV * 2.0 - 1.0;

    const vec4 origin = camera.viewInverse * vec4(0.0, 0.0, 0.0, 1.0);
    const vec4 target = camera.projInverse * vec4(d.x, d.y, 1.0, 1.0);
    const vec4 direction = camera.viewInverse * vec4(normalize(target.xyz), 0.0);
    hitValues += diffuse(origin.xyz, direction.xyz);
  }
  vec3 hitValue = hitValues / NUM_SAMPLES;
  imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 1.0));
}
